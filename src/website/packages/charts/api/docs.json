{
  "src/components/AreaChart.js": {
    "description": "The `<AreaChart>` component is able to display single or multiple stacked\nareas above or below the axis. It used throughout the\n[My ESnet Portal](http://my.es.net).\n\nThe `<AreaChart>` should be used within a `<ChartContainer>` structure,\nas this will construct the horizontal and vertical axis, and manage\nother elements. Here is an example of an `<AreaChart>` with an up and down\nnetwork traffic visualization:\n\n ```\n  render() {\n     return (\n         ...\n         <ChartContainer timeRange={trafficSeries.timerange()} width=\"1080\">\n             <ChartRow height=\"150\">\n                 <Charts>\n                     <AreaChart\n                         axis=\"traffic\"\n                         series={trafficSeries}\n                         columns={{up: [\"in\"], down: [\"out\"]}}\n                      />\n                 </Charts>\n                 <YAxis\n                     id=\"traffic\"\n                     label=\"Traffic (bps)\"\n                     min={-max} max={max}\n                     absolute={true}\n                     width=\"60\"\n                     type=\"linear\"\n                 />\n             </ChartRow>\n         </ChartContainer>\n         ...\n     );\n }\n ```\nThe `<AreaChart>` takes a single `TimeSeries` object into its `series` prop. This\nseries can contain multiple columns and those columns can be referenced using the `columns`\nprop. The `columns` props allows you to map columns in the series to the chart,\nletting you specify the stacking and orientation of the data. In the above example\nwe map the \"in\" column in `trafficSeries` to the up direction and the \"out\" column to\nthe down direction. Each direction is specified as an array, so adding multiple\ncolumns into a direction will stack the areas in that direction.\n\nNote: It is recommended that `<ChartContainer>`s be placed within a <Resizable> tag,\nrather than hard coding the width as in the above example.\n\nNote 2 : Columns can't have periods because periods represent a path to deep data \nin the underlying events (i.e. reference into nested data structures)",
    "displayName": "AreaChart",
    "methods": [
      {
        "name": "handleHover",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHoverLeave",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "providedAreaStyleMap",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "style",
        "docblock": "Returns the style used for drawing the path",
        "modifiers": [],
        "params": [
          {
            "name": "column"
          },
          {
            "name": "type"
          }
        ],
        "returns": null,
        "description": "Returns the style used for drawing the path"
      },
      {
        "name": "pathStyle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "areaStyle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderArea",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "data",
            "type": null
          },
          {
            "name": "column",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderPaths",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "columnList",
            "type": null
          },
          {
            "name": "direction",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderAreas",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "series": {
        "type": {
          "name": "instanceOf",
          "value": "TimeSeries"
        },
        "required": true,
        "description": "What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize"
      },
      "axis": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Reference to the axis which provides the vertical scale for ## drawing. e.g.\nspecifying axis=\"trafficRate\" would refer the y-scale to the YAxis of id=\"trafficRate\"."
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this chart",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "columns": {
        "type": {
          "name": "shape",
          "value": {
            "up": {
              "name": "arrayOf",
              "value": {
                "name": "string"
              },
              "required": false
            },
            "down": {
              "name": "arrayOf",
              "value": {
                "name": "string"
              },
              "required": false
            }
          }
        },
        "required": false,
        "description": "The series series columns mapped to stacking up and down.\nHas the format:\n```\n \"columns\": {\n     up: [\"in\", ...],\n     down: [\"out\", ...]\n }\n ```\n\nNOTE : Columns can't have periods because periods \nrepresent a path to deep data in the underlying events \n(i.e. reference into nested data structures)",
        "defaultValue": {
          "value": "{\n    up: [\"value\"],\n    down: []\n}",
          "computed": false
        }
      },
      "stack": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Stack areas on top of each other",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            },
            {
              "name": "instanceOf",
              "value": "Styler"
            }
          ]
        },
        "required": false,
        "description": "The styles to apply to the underlying SVG lines. This is a mapping\nof column names to objects with style attributes, in the following\nformat:\n\n```\nconst style = {\n    in: {\n        line: {\n            normal: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\n            highlighted: {stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1},\n            selected: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\n            muted: {stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1}\n        },\n        area: {\n            normal: {fill: \"steelblue\", stroke: \"none\", opacity: 0.75},\n            highlighted: {fill: \"#5a98cb\", stroke: \"none\", opacity: 0.75},\n            selected: {fill: \"steelblue\", stroke: \"none\", opacity: 0.75},\n            muted: {fill: \"steelblue\", stroke: \"none\", opacity: 0.25}\n        }\n    },\n    out: {\n        ...\n    }\n};\n\n<AreaChart style={style} ... />\n```\n\nAlternatively, you can pass in a Styler. For example:\n\n```\nconst upDownStyler = styler([\n    {key: \"in\", color: \"#C8D5B8\"},\n    {key: \"out\", color: \"#9BB8D7\"}\n]);\n\n<AreaChart columns={[\"in\", \"out\"]} style={upDownStyler} ... />\n\n```"
      },
      "interpolation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"curveBasis\"",
              "computed": false
            },
            {
              "value": "\"curveBasisOpen\"",
              "computed": false
            },
            {
              "value": "\"curveBundle\"",
              "computed": false
            },
            {
              "value": "\"curveCardinal\"",
              "computed": false
            },
            {
              "value": "\"curveCardinalOpen\"",
              "computed": false
            },
            {
              "value": "\"curveCatmullRom\"",
              "computed": false
            },
            {
              "value": "\"curveCatmullRomOpen\"",
              "computed": false
            },
            {
              "value": "\"curveLinear\"",
              "computed": false
            },
            {
              "value": "\"curveMonotoneX\"",
              "computed": false
            },
            {
              "value": "\"curveMonotoneY\"",
              "computed": false
            },
            {
              "value": "\"curveNatural\"",
              "computed": false
            },
            {
              "value": "\"curveRadial\"",
              "computed": false
            },
            {
              "value": "\"curveStep\"",
              "computed": false
            },
            {
              "value": "\"curveStepAfter\"",
              "computed": false
            },
            {
              "value": "\"curveStepBefore\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Any of D3's interpolation modes.",
        "defaultValue": {
          "value": "\"curveLinear\"",
          "computed": false
        }
      },
      "highlight": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The currenly highlighted column"
      },
      "onHighlightChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback called when the highlight changes, i.e. hover event"
      },
      "selection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The currenly selected column"
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback called when the selection changes, i.e. area is clicked"
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The yScale supplied by the associated YAxis"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      },
      "breakArea": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The determines how to handle bad/missing values in the supplied\nTimeSeries. A missing value can be null or NaN. If breakArea\nis set to true then the area chart will be broken on either side of\nthe bad value(s). If breakArea is false (the default) bad values\nare simply removed and the adjoining points are connected.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/components/BandChart.js": {
    "description": "Renders a band chart.\n\nThe TimeSeries supplied to the band chart, as the `series` prop can be one of two types:\n\n 1) It can be a TimeSeries containing IndexedEvents or TimeRangeEvents.\n    In this case a `column` prop should be supplied to specify the\n    data column containing the dimensions of the boxes. This props\n    should be an array of size 1 to 5 elements. e.g. [12, 18, 22, 28]. The\n    numbers should be ordered, lowest to greatest.\n\n 2) A TimeSeries containing timestamp based Events. In this case the\n    band chart will be aggregated for you. To control the aggregation you can supply\n    an `aggregation` prop: a structure to specify the window size and\n    reducers used to determine the boxes.\n\nIn both cases you are generating up to two ranges and a center marker. In the\nfirst case you are defining this based on the array of numbers. The outer numbers\nspecify the outerRange, the inner numbers specify the innerRange and the middle\nnumber specifies the center marker. In the second case you are building those ranges\nfrom denser data, specifying a window and aggregation functions to build each\nof the ranges and center maker.\n\nIn both cases you do not need to supply all the values. For example if you\nprovide an array of 2 elements, that would define a single range, with no outer range\nand no center marker. The Band Chart is pretty flexible in that way, so you\ncan use it in many situations.\n\nHere is an example of using it to display temperature ranges. The series\npassed to this code would be a TimeSeries containing IndexedEvents. For\neach event, the column `temp` contains an array of values used for the\nbox plot ranges:\n\n```\n    <BandChart\n      axis=\"temperatureAxis\"\n      style={style}\n      column=\"temp\"\n      series={series} />\n```\n\nWhile here is an example with a dense TimeSeries of Events supplied,\nalong with an aggregation specification. This code would produce an\nouter range from the 5th percentile to the 95th, along with an inner\nrange for the interquantile, and a center marker at the median:\n\n```\n   <BandChart\n     axis=\"speedaxis\"\n     series={speed}\n     column=\"speed\"\n     style={style}\n     aggregation={{\n       size: this.state.rollup,\n       reducers: {\n         outer: [percentile(5), percentile(95)],\n         inner: [percentile(25), percentile(75)],\n         center: median(),\n       },\n     }}\n   />\n```",
    "displayName": "BandChart",
    "methods": [
      {
        "name": "handleHover",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHoverLeave",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "providedStyleArray",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "style",
        "docblock": "Returns the style used for drawing the path",
        "modifiers": [],
        "params": [
          {
            "name": "column"
          },
          {
            "name": "event"
          },
          {
            "name": "level"
          }
        ],
        "returns": null,
        "description": "Returns the style used for drawing the path"
      },
      {
        "name": "renderAreas",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "series": {
        "type": {
          "name": "instanceOf",
          "value": "TimeSeries"
        },
        "required": true,
        "description": "What [Pond TimeSeries](http://software.es.net/pond#timeseries)\ndata to visualize. See general notes on the BandChart."
      },
      "column": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The column within the TimeSeries to plot. Unlike other charts, the BandChart\nworks on just a single column.\n\nNOTE : Columns can't have periods because periods \nrepresent a path to deep data in the underlying events \n(i.e. reference into nested data structures)",
        "defaultValue": {
          "value": "\"value\"",
          "computed": false
        }
      },
      "aggregation": {
        "type": {
          "name": "shape",
          "value": {
            "size": {
              "name": "string",
              "required": false
            },
            "reducers": {
              "name": "shape",
              "value": {
                "inner": {
                  "name": "arrayOf",
                  "value": {
                    "name": "func"
                  },
                  "required": false
                },
                "outer": {
                  "name": "arrayOf",
                  "value": {
                    "name": "func"
                  },
                  "required": false
                },
                "center": {
                  "name": "func",
                  "required": false
                }
              },
              "required": false
            }
          }
        },
        "required": false,
        "description": "The aggregation specification. This object should contain:\n  - innerMax\n  - innerMin\n  - outerMax\n  - outerMin\n  - center\nThough each of the pairs, and center, is optional.\nFor each of these keys you should supply the function you\nwant to use to calculate these. You can import common functions\nfrom Pond, e.g. min(), avg(), percentile(95), etc.\n\nFor example:\n```\n    {\n      size: this.state.rollup,\n      reducers: {\n        outer: [min(), max()],\n        inner: [percentile(25), percentile(75)],\n        center: median(),\n      },\n    }\n```"
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            },
            {
              "name": "instanceOf",
              "value": "Styler"
            }
          ]
        },
        "required": false,
        "description": "The style of the box chart drawing (using SVG CSS properties) or\na styler object. It is recommended to user the styler unless you need\ndetailed customization."
      },
      "infoStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the info box and connecting lines",
        "defaultValue": {
          "value": "{\n    stroke: \"#999\",\n    fill: \"white\",\n    opacity: 0.9,\n    pointerEvents: \"none\"\n}",
          "computed": false
        }
      },
      "infoWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the hover info box",
        "defaultValue": {
          "value": "90",
          "computed": false
        }
      },
      "infoHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the hover info box",
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "info": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": false
              },
              "value": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "The values to show in the info box. This is an array of\nobjects, with each object specifying the label and value\nto be shown in the info box."
      },
      "innerSpacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If spacing is specified, then the boxes will be separated from the\ntimerange boundary by this number of pixels. Use this to space out\nthe boxes from each other. Inner and outer boxes are controlled\nseparately.",
        "defaultValue": {
          "value": "1.0",
          "computed": false
        }
      },
      "outerSpacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If spacing is specified, then the boxes will be separated from the\ntimerange boundary by this number of pixels. Use this to space out\nthe boxes from each other. Inner and outer boxes are controlled\nseparately.",
        "defaultValue": {
          "value": "2.0",
          "computed": false
        }
      },
      "innerSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If size is specified, then the innerBox will be this number of pixels wide. This\nprop takes priority over \"spacing\"."
      },
      "outerSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If size is specified, then the outer box will be this number of pixels wide. This\nprop takes priority over \"spacing\"."
      },
      "selected": {
        "type": {
          "name": "instanceOf",
          "value": "IndexedEvent"
        },
        "required": false,
        "description": "The selected item, which will be rendered in the \"selected\" style.\nIf a bar is selected, all other bars will be rendered in the \"muted\" style.\n\nSee also `onSelectionChange`"
      },
      "highlighted": {
        "type": {
          "name": "instanceOf",
          "value": "IndexedEvent"
        },
        "required": false,
        "description": "The highlighted item, which will be rendered in the \"highlighted\" style.\n\nSee also `onHighlightChange`"
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback that will be called when the selection changes. It will be called\nwith the event corresponding to the box clicked as its only arg."
      },
      "onHighlightChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback that will be called when the hovered over box changes.\nIt will be called with the event corresponding to the box hovered over."
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The yScale supplied by the associated YAxis"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      },
      "stemStyle": {
        "defaultValue": {
          "value": "{\n    stroke: \"#999\",\n    cursor: \"crosshair\",\n    pointerEvents: \"none\"\n}",
          "computed": false
        },
        "required": false
      },
      "markerStyle": {
        "defaultValue": {
          "value": "{\n    fill: \"#999\"\n}",
          "computed": false
        },
        "required": false
      },
      "markerRadius": {
        "defaultValue": {
          "value": "2",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/BarChart.js": {
    "description": "Renders a bar chart based on IndexedEvents within a TimeSeries.\n\nThis BarChart implementation is a little different that other time axis\nbar charts in that it will render across a the time range of the event\nrather than rendering to specific categories. As a result,\na Aug-2014 bar will render between the Aug 2014 tick mark and\nthe Sept 2014 tickmark. However, this allows it to play well with other\ntypes of charts that maybe integrated into the same visualization.\n\nThe BarChart will render a single TimeSeries. You can specify the columns\nyou want to render with the `columns` prop. Each column will be stacked on\nthe other, in the order specified in the `columns` array.\n\n### IndexedEvents\n\nBarCharts are supposed to be for aggregated values (e.g. average of\nmany points over an hour), so the hours themselves are specified\nwith an \"Index\". An Index is a string that represents that range of time,\nrather than a specific time like a timestamp would.\n\nPond provides several mechanisms for building aggregated series from\na TimeSeries, and the BarChart code is suited to visualizing that\noutput. See Pond for more details (especially TimeSeries.fixedWindowRollup\nand the Pipeline processing facilities). The realtime example in this\nlibrary also shows how to do this on incoming streams of data.\n\nIf you have one timestamped point per hour and really want to represent\nthose with a BarChart, you can use the Pond static method\n`Index.getIndexString(period, date)` to take the Date and return an\nIndex string. Say if those points were hourly, you'll end up with\nstrings that look like \"1h-412715\". This represents a specific hour\nin time (the 412,715th hour since midnight 1 Jan 1970, actually).\nNote that for larger time periods, index strings can be partial\ndates, like \"2016-08-31\" for Aug 31st, 2016 or \"2016-08\" for Aug 2016.\n\nUse those index strings to build your timeseries instead of timestamps.\nHere's the Pond code needed to convert a date to an index string:\n\n```\n  import { Index } from \"pondjs\";\n  const d = new Date(\"2017-01-30T11:58:38.741Z\");\n  const index = Index.getIndexString(\"1h\", d);   // '1h-412715'\n```\n\nWith either the aggregated approach, or the above timestamped\nconversion, you will want a `TimeSeries` of `IndexedEvent`s that\nlooks like this:\n```\n  const series = new TimeSeries({\n    name: \"myseries\",\n    columns: [\"index\", \"value\"],\n    points: [\n      [\"1h-41275\", 22],\n      [\"1h-41276\", 35],\n      [\"1h-41277\", 72],\n      ...\n    ]\n  })\n```\n\nNote: the first column of the timeseries should be \"index\" (not \"time\")\nand each point should have an index string at the beginning.\n\n### Interactivity\n\nThe BarChart supports selection of individual bars. To control this use\n`onSelectionChange` to get a callback of selection changed. Your callback\nwill be called with the selection (an object containing the event\nand column). You can pass this back into the BarChart as `selection`. For\nexample:\n\n```\n <BarChart\n     ...\n     selection={this.state.selection}\n     onSelectionChange={selection => this.setState({selection})} />\n```\n\nSimilarly you can monitor which bar is being hovered over with the\n`onHighlightChange` callback. This can be used to determine the info box\nto display. Info box will display a box (like a tooltip) with a line\nconnecting it to the bar. You use the `info` prop to evoke this and to\nsupply the text for the info box. See the styling notes below for more\ninformation on this.\n\n### Styling\n\nA BarChart supports per-column or per-event styling. Styles can be set for\neach of the four states that are possible: normal, highlighted,\nselected and muted. To style per-column, supply an object. For per-event styling\nsupply a function: `(event, column) => {}` The functon should return a style object.\n\nSee the `style` prop in the API documentation for more information.\n\nSeparately the size of the bars can be controlled with the `spacing` and\n`offset` props. Spacing controls the gap between the bars. Offset moves the\nbars left or right by the given number of pixels. You can use this to place\nbars along side each other. Alternatively, you can give each column a fixed width\nusing the `size` prop. In this case this size will be used in preference to the size\ndetermined from the timerange of the event and the `spacing`.\n\nThe info box is also able to be styled using `infoStyle`, `stemStyle` and\n`markerStyle` This enables you to control the drawing of the box, the connecting\nlines (stem) and dot respectively. Using the `infoWidth` and `infoHeight`\nprops you can control the size of the box, which is fixed. For the info inside\nthe box, it's up to you: it can either be a simple string or an array of\n{label, value} pairs.",
    "displayName": "BarChart",
    "methods": [
      {
        "name": "handleHover",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "event",
            "type": null
          },
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHoverLeave",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "event",
            "type": null
          },
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "providedStyleMap",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "style",
        "docblock": "Returns the style used for drawing the path",
        "modifiers": [],
        "params": [
          {
            "name": "column"
          },
          {
            "name": "event"
          }
        ],
        "returns": null,
        "description": "Returns the style used for drawing the path"
      },
      {
        "name": "renderBars",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this chart",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "series": {
        "type": {
          "name": "instanceOf",
          "value": "TimeSeries"
        },
        "required": true,
        "description": "What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries)\ndata to visualize"
      },
      "spacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The distance in pixels to inset the bar chart from its actual timerange",
        "defaultValue": {
          "value": "1.0",
          "computed": false
        }
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The distance in pixels to offset the bar from its center position within the timerange\nit represents",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "minBarHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum height of a bar given in pixels.\nBy default, the minimum height of a bar is 1 pixel",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "columns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "A list of columns within the series that will be stacked on top of each other\n\nNOTE : Columns can't have periods because periods\nrepresent a path to deep data in the underlying events\n(i.e. reference into nested data structures)",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "highlightEntireEvent": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When true, the entire `highlighted` event will be highlighted, instead of\nonly the column bar that's currently being hovered",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            },
            {
              "name": "instanceOf",
              "value": "Styler"
            }
          ]
        },
        "required": false,
        "description": "The style of the bar chart drawing (using SVG CSS properties).\nThis is an object with a key for each column which is being drawn,\nper the `columns` prop. For each column a style is defined for\neach state the bar may be in. This style is the CSS properties for\nthe underlying SVG <Rect>, so most likely you'll define fill and\nopacity.\n\nFor example:\n```\nstyle = {\n    columnName: {\n        normal: {\n            fill: \"steelblue\",\n            opacity: 0.8,\n        },\n        highlighted: {\n            fill: \"#a7c4dd\",\n            opacity: 1.0,\n        },\n        selected: {\n            fill: \"orange\",\n            opacity: 1.0,\n        },\n        muted: {\n            fill: \"grey\",\n            opacity: 0.5\n        }\n    }\n}\n```\n\nYou can also supply a function, which will be called with an event\nand column. The function should return an object containing the\nfour states (normal, highlighted, selected and muted) and the corresponding\nCSS properties."
      },
      "info": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": false
              },
              "value": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "The values to show in the info box. This is an array of\nobjects, with each object specifying the label and value\nto be shown in the info box."
      },
      "infoStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the info box itself. Typically you'd want to\nspecify a fill color, and stroke color / width here.",
        "defaultValue": {
          "value": "{\n    stroke: \"#999\",\n    fill: \"white\",\n    opacity: 0.9,\n    pointerEvents: \"none\"\n}",
          "computed": false
        }
      },
      "infoWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the info box",
        "defaultValue": {
          "value": "90",
          "computed": false
        }
      },
      "infoHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the info box",
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "infoOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The vertical offset in pixels of the EventMarker info box from the\ntop of the chart.",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "infoTimeFormat": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "Alter the format of the timestamp shown on the info box.\nThis may be either a function or a string. If you provide a function\nthat will be passed an Index and should return a string. For example:\n```\n    index => moment(index.begin()).format(\"Do MMM 'YY\")\n```\nAlternatively you can pass in a d3 format string. That will be applied\nto the begin time of the Index range."
      },
      "markerRadius": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The radius of the infoBox dot at the end of the marker",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "markerStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the infoBox dot at the end of the marker",
        "defaultValue": {
          "value": "{\n    fill: \"#999\"\n}",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If size is specified, then the bar will be this number of pixels wide. This\nprop takes priority over \"spacing\"."
      },
      "selected": {
        "type": {
          "name": "shape",
          "value": {
            "event": {
              "name": "instanceOf",
              "value": "IndexedEvent",
              "required": false
            },
            "column": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "The selected item, which will be rendered in the \"selected\" style.\nIf a bar is selected, all other bars will be rendered in the \"muted\" style.\n\nSee also `onSelectionChange`"
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback that will be called when the selection changes. It will be called\nwith an object containing the event and column."
      },
      "highlighted": {
        "type": {
          "name": "shape",
          "value": {
            "event": {
              "name": "instanceOf",
              "value": "IndexedEvent",
              "required": false
            },
            "column": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "The highlighted item, which will be rendered in the \"highlighted\" style.\n\nSee also `onHighlightChange`"
      },
      "onHighlightChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback that will be called when the hovered over bar changes.\nIt will be called with an object containing the event and column."
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The yScale supplied by the associated YAxis"
      },
      "stemStyle": {
        "defaultValue": {
          "value": "{\n    stroke: \"#999\",\n    cursor: \"crosshair\",\n    pointerEvents: \"none\"\n}",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/Baseline.js": {
    "description": "The BaseLine component displays a simple horizontal line at a value.\n\nFor example the following code overlays Baselines for the mean and stdev\nof a series on top of another chart.\n\n```\n<ChartContainer timeRange={series.timerange()} >\n    <ChartRow height=\"150\">\n        <YAxis\n          id=\"price\"\n          label=\"Price ($)\"\n          min={series.min()} max={series.max()}\n          width=\"60\" format=\"$,.2f\"\n        />\n        <Charts>\n            <LineChart axis=\"price\" series={series} style={style} />\n            <Baseline axis=\"price\" value={series.avg()} label=\"Avg\" position=\"right\" />\n            <Baseline axis=\"price\" value={series.avg()-series.stdev()} />\n            <Baseline axis=\"price\" value={series.avg()+series.stdev()} />\n        </Charts>\n    </ChartRow>\n</ChartContainer>\n```",
    "displayName": "Baseline",
    "methods": [],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this chart",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "axis": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Reference to the axis which provides the vertical scale for drawing. e.g.\nspecifying axis=\"trafficRate\" would refer the y-scale to the YAxis of id=\"trafficRate\"."
      },
      "style": {
        "type": {
          "name": "shape",
          "value": {
            "label": {
              "name": "object",
              "required": false
            },
            "line": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "An object describing the style of the baseline of the form\n{ label, line }. \"label\" and \"line\" are both objects containing\nthe inline CSS for that part of the baseline.",
        "defaultValue": {
          "value": "{\n    label: {\n        fill: \"#8B7E7E\", // Default label color\n        fontWeight: 100,\n        fontSize: 11,\n        pointerEvents: \"none\"\n    },\n    line: {\n        stroke: \"#626262\",\n        strokeWidth: 1,\n        strokeDasharray: \"5,3\",\n        pointerEvents: \"none\"\n    }\n}",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The y-value to display the line at.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The label to display with the axis.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Whether to display the label on the \"left\" or \"right\".",
        "defaultValue": {
          "value": "\"left\"",
          "computed": false
        }
      },
      "vposition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"above\"",
              "computed": false
            },
            {
              "value": "\"below\"",
              "computed": false
            },
            {
              "value": "\"auto\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Whether to display the label above or below the line. The default is \"auto\",\nwhich will show it above the line unless the position is near to the top\nof the chart.",
        "defaultValue": {
          "value": "\"auto\"",
          "computed": false
        }
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The yScale supplied by the associated YAxis"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      }
    }
  },
  "src/components/BoxChart.js": {
    "description": "Renders a boxplot chart.\n\nThe TimeSeries supplied to the boxplot, as the `series` prop can be one of two types:\n\n 1) It can be a TimeSeries containing IndexedEvents or TimeRangeEvents.\n    In this case a `column` prop should be supplied to specify the\n    data column containing the dimensions of the boxes. This props\n    should be an array of size 1 to 5 elements. e.g. [12, 18, 22, 28]. The\n    numbers should be ordered, lowest to greatest.\n\n 2) A TimeSeries containing timestamp based Events. In this case the\n    boxplot will be aggregated for you. To control the aggregation you can supply\n    an `aggregation` prop: a structure to specify the window size and\n    reducers used to determine the boxes.\n\nIn both cases you are generating up to two ranges and a center marker. In the\nfirst case you are defining this based on the array of numbers. The outer numbers\nspecify the outerRange, the inner numbers specify the innerRange and the middle\nnumber specifies the center marker. In the second case you are building those ranges\nfrom denser data, specifying a window and aggregation functions to build each\nof the ranges and center maker.\n\nIn both cases you do not need to supply all the values. For example if you\nprovide an array of 2 elements, that would define a single range, with no outer range\nand no center marker. The BoxChart is pretty flexible in that way, so you\ncan use it in many situations.\n\nHere is an example of using it to display temperature ranges. The series\npassed to this code would be a TimeSeries containing IndexedEvents. For\neach event, the column `temp` contains an array of values used for the\nbox plot ranges:\n\n```\n    <BoxChart\n      axis=\"temperatureAxis\"\n      style={style}\n      column=\"temp\"\n      series={series} />\n```\n\nWhile here is an example with a dense TimeSeries of Events supplied,\nalong with an aggregation specification. This code would produce an\nouter range from the 5th percentile to the 95th, along with an inner\nrange for the interquantile, and a center marker at the median:\n\n```\n   <BoxChart\n     axis=\"speedaxis\"\n     series={speed}\n     column=\"speed\"\n     style={style}\n     aggregation={{\n       size: this.state.rollup,\n       reducers: {\n         outer: [percentile(5), percentile(95)],\n         inner: [percentile(25), percentile(75)],\n         center: median(),\n       },\n     }}\n   />\n```\n\nThe BoxChart supports Info boxes, highlighting and selection.\n\nNote: selection and highlighting is on the whole event, not individual ranges.\nAlso note that since the box chart builds an internal TimeSeries for performance\nreasons, selection will give you and IndexedEvent, but it won't be the same\nIndexedEvent in your `series`. Similarly if you are using the aggregation\nspecification you will get events for the rollup, not your original data.",
    "displayName": "BoxChart",
    "methods": [
      {
        "name": "handleHover",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHoverLeave",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "providedStyleArray",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "style",
        "docblock": "Returns the style used for drawing the path",
        "modifiers": [],
        "params": [
          {
            "name": "column"
          },
          {
            "name": "event"
          },
          {
            "name": "level"
          }
        ],
        "returns": null,
        "description": "Returns the style used for drawing the path"
      },
      {
        "name": "renderBars",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this chart",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "series": {
        "type": {
          "name": "custom",
          "raw": "(props, propName, componentName) => {\n    const value = props[propName];\n    if (!(value instanceof TimeSeries)) {\n        return new Error(\n            `A TimeSeries needs to be passed to ${componentName} as the 'series' prop.`\n        );\n    }\n\n    // TODO: Better detection of errors\n\n    // everything ok\n    return null;\n}"
        },
        "required": false,
        "description": "What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries)\ndata to visualize. See general notes on the BoxChart."
      },
      "column": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The column within the TimeSeries to plot. Unlike other charts, the BoxChart\nworks on just a single column.\n\nNOTE : Columns can't have periods because periods\nrepresent a path to deep data in the underlying events\n(i.e. reference into nested data structures)",
        "defaultValue": {
          "value": "\"value\"",
          "computed": false
        }
      },
      "aggregation": {
        "type": {
          "name": "shape",
          "value": {
            "size": {
              "name": "string",
              "required": false
            },
            "reducers": {
              "name": "shape",
              "value": {
                "inner": {
                  "name": "arrayOf",
                  "value": {
                    "name": "func"
                  },
                  "required": false
                },
                "outer": {
                  "name": "arrayOf",
                  "value": {
                    "name": "func"
                  },
                  "required": false
                },
                "center": {
                  "name": "func",
                  "required": false
                }
              },
              "required": false
            }
          }
        },
        "required": false,
        "description": "The aggregation specification. This object should contain:\n  - innerMax\n  - innerMin\n  - outerMax\n  - outerMin\n  - center\nThough each of the pairs, and center, is optional.\nFor each of these keys you should supply the function you\nwant to use to calculate these. You can import common functions\nfrom Pond, e.g. min(), avg(), percentile(95), etc.\n\nFor example:\n```\n    {\n      size: this.state.rollup,\n      reducers: {\n        outer: [min(), max()],\n        inner: [percentile(25), percentile(75)],\n        center: median(),\n      },\n    }\n```"
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            },
            {
              "name": "instanceOf",
              "value": "Styler"
            }
          ]
        },
        "required": false,
        "description": "The style of the box chart drawing (using SVG CSS properties) or\na styler object. It is recommended to user the styler unless you need\ndetailed customization."
      },
      "infoStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the info box and connecting lines",
        "defaultValue": {
          "value": "{\n    stroke: \"#999\",\n    fill: \"white\",\n    opacity: 0.9,\n    pointerEvents: \"none\"\n}",
          "computed": false
        }
      },
      "infoWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the hover info box",
        "defaultValue": {
          "value": "90",
          "computed": false
        }
      },
      "infoHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the hover info box",
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "infoOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The vertical offset in pixels of the EventMarker info box from the\ntop of the chart.",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "info": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": false
              },
              "value": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "The values to show in the info box. This is an array of\nobjects, with each object specifying the label and value\nto be shown in the info box."
      },
      "innerSpacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If spacing is specified, then the boxes will be separated from the\ntimerange boundary by this number of pixels. Use this to space out\nthe boxes from each other. Inner and outer boxes are controlled\nseparately.",
        "defaultValue": {
          "value": "1.0",
          "computed": false
        }
      },
      "outerSpacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If spacing is specified, then the boxes will be separated from the\ntimerange boundary by this number of pixels. Use this to space out\nthe boxes from each other. Inner and outer boxes are controlled\nseparately.",
        "defaultValue": {
          "value": "2.0",
          "computed": false
        }
      },
      "innerSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If size is specified, then the innerBox will be this number of pixels wide. This\nprop takes priority over \"spacing\"."
      },
      "outerSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If size is specified, then the outer box will be this number of pixels wide. This\nprop takes priority over \"spacing\"."
      },
      "selected": {
        "type": {
          "name": "instanceOf",
          "value": "IndexedEvent"
        },
        "required": false,
        "description": "The selected item, which will be rendered in the \"selected\" style.\nIf a bar is selected, all other bars will be rendered in the \"muted\" style.\n\nSee also `onSelectionChange`"
      },
      "highlighted": {
        "type": {
          "name": "instanceOf",
          "value": "IndexedEvent"
        },
        "required": false,
        "description": "The highlighted item, which will be rendered in the \"highlighted\" style.\n\nSee also `onHighlightChange`"
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback that will be called when the selection changes. It will be called\nwith the event corresponding to the box clicked as its only arg."
      },
      "onHighlightChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback that will be called when the hovered over box changes.\nIt will be called with the event corresponding to the box hovered over."
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The yScale supplied by the associated YAxis"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      },
      "stemStyle": {
        "defaultValue": {
          "value": "{\n    stroke: \"#999\",\n    cursor: \"crosshair\",\n    pointerEvents: \"none\"\n}",
          "computed": false
        },
        "required": false
      },
      "markerStyle": {
        "defaultValue": {
          "value": "{\n    fill: \"#999\"\n}",
          "computed": false
        },
        "required": false
      },
      "markerRadius": {
        "defaultValue": {
          "value": "2",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/Brush.js": {
    "description": "Renders a brush with the range defined in the prop `timeRange`.",
    "displayName": "Brush",
    "methods": [
      {
        "name": "viewport",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleBrushMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleOverlayMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHandleMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "handle",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": "Handles clearing the TimeRange if the user clicks on the overlay (but\ndoesn't drag to create a new brush). This will send a null as the\nnew TimeRange. The user of this code can react to that however they\nsee fit, but the most logical response is to reset the timerange to\nsome initial value. This behavior is optional.",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Handles clearing the TimeRange if the user clicks on the overlay (but\ndoesn't drag to create a new brush). This will send a null as the\nnew TimeRange. The user of this code can react to that however they\nsee fit, but the most logical response is to reset the timerange to\nsome initial value. This behavior is optional."
      },
      {
        "name": "handleMouseMove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderOverlay",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderBrush",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderHandles",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "timeRange": {
        "type": {
          "name": "instanceOf",
          "value": "TimeRange"
        },
        "required": false,
        "description": "The timerange for the brush. Typically you would maintain this\nas state on the surrounding page, since it would likely control\nanother page element, such as the range of the main chart. See\nalso `onTimeRangeChanged()` for receiving notification of the\nbrush range being changed by the user.\n\nTakes a Pond TimeRange object."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The brush is rendered as an SVG rect. You can specify the style\nof this rect using this prop."
      },
      "handleSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The size of the invisible side handles. Defaults to 6 pixels.",
        "defaultValue": {
          "value": "6",
          "computed": false
        }
      },
      "allowSelectionClear": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onTimeRangeChanged": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback which will be called if the brush range is changed by\nthe user. It is called with a Pond TimeRange object. Note that if\n`allowSelectionClear` is set to true, then this can also be called\nwhen the user performs a simple click outside the brush area. In\nthis case it will be called with null as the TimeRange. You can\nuse this to reset the selection, perhaps to some initial range."
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The height supplied by the surrounding ChartContainer"
      }
    }
  },
  "src/components/ChartContainer.js": {
    "description": "The `<ChartContainer>` is the outer most element of a chart and is\nresponsible for generating and arranging its sub-elements. Specifically,\nit is a container for one or more `<ChartRows>` (each of which contains\ncharts, axes etc) and in addition it manages the overall time range of\nthe chart and so also is responsible for the time axis, which is always\nshared by all the rows.\n\nHere is an example:\n\n```xml\n<ChartContainer timeRange={audSeries.timerange()} width=\"800\">\n    <ChartRow>\n        ...\n    </ChartRow>\n    <ChartRow>\n        ...\n    </ChartRow>\n</ChartContainer>\n```",
    "displayName": "ChartContainer",
    "methods": [
      {
        "name": "handleTrackerChanged",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "t",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTimeRangeChanged",
        "docblock": "Within the charts library the time range of the x axis is kept as a begin\nand end time (Javascript Date objects). But the interface is Pond based,\nso this callback returns a Pond TimeRange.",
        "modifiers": [],
        "params": [
          {
            "name": "timerange"
          }
        ],
        "returns": null,
        "description": "Within the charts library the time range of the x axis is kept as a begin\nand end time (Javascript Date objects). But the interface is Pond based,\nso this callback returns a Pond TimeRange."
      },
      {
        "name": "handleMouseMove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "x",
            "type": null
          },
          {
            "name": "y",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseOut",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleContextMenu",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "x",
            "type": null
          },
          {
            "name": "y",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBackgroundClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "x",
            "type": null
          },
          {
            "name": "y",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleZoom",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "timerange",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "saveSvgRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "timeRange": {
        "type": {
          "name": "instanceOf",
          "value": "TimeRange"
        },
        "required": true,
        "description": "A [Pond TimeRange](https://esnet-pondjs.appspot.com/#/timerange) representing the\nbegin and end time of the chart."
      },
      "utc": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should the time axis use a UTC scale or local",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "element"
              }
            },
            {
              "name": "element"
            }
          ]
        },
        "required": true,
        "description": "Children of the ChartContainer should be ChartRows."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the chart. This library also includes a <Resizable> component\nthat can be wrapped around a \\<ChartContainer\\>. The purpose of this is to\ninject a width prop into the ChartContainer so that it will fit the\nsurrounding element. This is very handy when you need the chart to resize\nbased on a responsive layout.",
        "defaultValue": {
          "value": "800",
          "computed": false
        }
      },
      "minTime": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "Constrain the timerange to not move back in time further than this Date."
      },
      "maxTime": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "Constrain the timerange to not move forward in time than this Date. A\ncommon example is setting this to the current time or the end time\nof a fixed set of data."
      },
      "enablePanZoom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean to turn on interactive pan and zoom behavior for the chart.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "enableDragZoom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean to turn on interactive drag to zoom behavior for the chart.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableWheelZoom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean to turn off interactive mouse wheel to zoom behavior for the chart.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "minDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If this is set the timerange of the chart cannot be zoomed in further\nthan this duration, in milliseconds. This might be determined by the\nresolution of your data."
      },
      "format": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "Provides several options as to the format of the time axis labels.\n\nIn general the time axis will generate an appropriate time scale based\non the timeRange prop and there is no need to set this.\n\nHowever, some options exist:\n\n - setting format to \"day\", \"month\" or \"year\" will show only ticks on those,\nand every one of those intervals. For example maybe you are showing a bar\nchart for October 2014 then setting the format to \"day\" will insure that a\nlabel is placed for each and every day\n\n - setting format to \"relative\" interprets the time as a duration. This\nis good for data that is specified relative to its start time, rather than\nas an actual date/time\n\n - setting the format to a d3 format string will use that format\n\n - supplying a function for format will cause that function to be called\nwhenever rendering a time"
      },
      "transition": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Time in milliseconds to transition from one Y-scale to the next"
      },
      "showGrid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show grid lines for each time marker",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showGridPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"over\"",
              "computed": false
            },
            {
              "value": "\"under\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines whether grid is overlayed (\"over\"( or underlayed (\"under\")\nwith respect to the charts",
        "defaultValue": {
          "value": "\"over\"",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines how to style the SVG"
      },
      "trackerHintWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the tracker info box"
      },
      "trackerHintHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the tracker info box"
      },
      "trackerValues": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "shape",
                "value": {
                  "label": {
                    "name": "string",
                    "required": false
                  },
                  "value": {
                    "name": "string",
                    "required": false
                  }
                }
              }
            }
          ]
        },
        "required": false,
        "description": "Info box value or values to place next to the tracker line.\nThis is either an array of objects, with each object\nspecifying the label and value to be shown in the info box,\nor a simple string label."
      },
      "trackerPosition": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "A Date specifying the position of the tracker line on the chart. It is\ncommon to take this from the onTrackerChanged callback so that the tracker\nfollowers the user's cursor, but it could be modified to snap to a point or\nto the nearest minute, for example."
      },
      "trackerStyle": {
        "type": {
          "name": "shape",
          "value": {
            "line": {
              "name": "object",
              "required": false
            },
            "box": {
              "name": "object",
              "required": false
            },
            "dot": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "The style of the time marker. This is an object of the form { line, box, dot }.\nLine, box and dot are themselves objects representing inline CSS for each of\nthe pieces of the info marker.\n\nWhen we use the TimeMarker as a tracker, we can style the box and dot as well.",
        "defaultValue": {
          "value": "{\n    line: {\n        stroke: \"#999\",\n        cursor: \"crosshair\",\n        pointerEvents: \"none\"\n    },\n    box: {\n        fill: \"white\",\n        opacity: 0.9,\n        stroke: \"#999\",\n        pointerEvents: \"none\"\n    },\n    dot: {\n        fill: \"#999\"\n    }\n}",
          "computed": false
        }
      },
      "onTrackerChanged": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Will be called when the user hovers over a chart. The callback will\nbe called with the timestamp (a Date object) of the position hovered\nover as well as the current time axis' time scale. The timestamp may\nbe used as the trackerPosition (see above), or to provide information\nabout the time hovered over within the greater page. The time scale\nmay be used to translate the timestamp into an x coordinate, which\ncan then be used to position arbitrary components in sync with the\ncurrent tracker position.\nCommonly we might do something like this:\n```\n  <ChartContainer\n    onTrackerChanged={(tracker) => this.setState({tracker})}\n    trackerPosition={this.state.tracker}\n    ... />\n```"
      },
      "onTimeRangeChanged": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "This will be called if the user pans and/or zooms the chart. The callback\nwill be called with the new TimeRange. This can be fed into the timeRange\nprop as well as used elsewhere on the greater page. Typical use might look\nlike this:\n```\n  <ChartContainer\n    onTimeRangeChanged={(timerange) => this.setState({timerange})}\n    timeRange={this.state.timerange}\n    ... />\n```"
      },
      "onChartResize": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the size of the chart changes"
      },
      "onBackgroundClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks the background plane of the chart. This is\nuseful when deselecting elements."
      },
      "onContextMenu": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user context-clicks the chart"
      },
      "padding": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Props for handling the padding",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "paddingLeft": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "paddingRight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "paddingTop": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "paddingBottom": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the title for the chart"
      },
      "titleHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specify the height of the title\nDefault value is 28 pixels"
      },
      "titleStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Specify the styling of the chart's title",
        "defaultValue": {
          "value": "{\n    fontWeight: 100,\n    fontSize: 14,\n    font: '\"Goudy Bookletter 1911\", sans-serif\"',\n    fill: \"#C0C0C0\"\n}",
          "computed": false
        }
      },
      "timeAxisStyle": {
        "type": {
          "name": "shape",
          "value": {
            "axis": {
              "name": "object",
              "required": false
            },
            "values": {
              "name": "object",
              "required": false
            },
            "ticks": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object specifying the CSS by which the `TimeAxis` can be styled. The object can contain:\n\"values\" (the time labels), \"axis\" (the main horizontal line) and \"ticks\" (which may\noptionally extend the height of all chart rows using the `showGrid` prop. Each of these\nis an inline CSS style applied to the axis label, axis values, axis line and ticks\nrespectively.\n\nNote that \"ticks\" and \"values\" are passed into d3's styles, so they are regular CSS property names\nand not React's camel case names (e.g. \"stroke-dasharray\" not \"strokeDasharray\"). \"axis\" is a\nregular React rendered SVG line, so it uses camel case.",
        "defaultValue": {
          "value": "{\n    axis: {\n        fill: \"none\",\n        stroke: \"#C0C0C0\",\n        pointerEvents: \"none\"\n    }\n}",
          "computed": false
        }
      },
      "timeAxisHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Height of the time axis\nDefault value is 35 pixels"
      },
      "timeAxisTickCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specify the number of ticks\nThe default ticks for quantitative scales are multiples of 2, 5 and 10.\nSo, while you can use this prop to increase or decrease the tick count, it will always return multiples of 2, 5 and 10."
      },
      "timeAxisAngledLabels": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Angle the time axis labels"
      },
      "hideTimeAxis": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to hide time axis if required",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/ChartRow.js": {
    "description": "A ChartRow is a container for a set of YAxis and multiple charts\nwhich are overlaid on each other in a central canvas.\n\nHere is an example where a single `<ChartRow>` is defined within\nthe `<ChartContainer>`. Of course you can have any number of rows.\n\nFor this row we specify the one prop `height` as 200 pixels high.\n\nWithin the `<ChartRow>` we add:\n\n* `<YAxis>` elements for axes to the left of the chart\n* `<Chart>` block containing our central chart area\n* `<YAxis>` elements for our axes to the right of the charts\n\n```\n<ChartContainer timeRange={audSeries.timerange()}>\n    <ChartRow height=\"200\">\n        <YAxis />\n        <YAxis />\n        <Charts>\n            charts...\n       </Charts>\n        <YAxis />\n    </ChartRow>\n</ChartContainer>\n```",
    "displayName": "ChartRow",
    "methods": [
      {
        "name": "isChildYAxis",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "child",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "updateScales",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The height of the row.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "axisMargin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The vertical margin between the top and bottom of the row\nheight and the top and bottom of the range of the chart.",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this row",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "trackerShowTime": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should the time be shown on top of the tracker info box"
      },
      "trackerInfoWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the tracker info box"
      },
      "trackerInfoHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the tracker info box"
      },
      "trackerInfoValues": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "shape",
                "value": {
                  "label": {
                    "name": "string",
                    "required": false
                  },
                  "value": {
                    "name": "string",
                    "required": false
                  }
                }
              }
            }
          ]
        },
        "required": false,
        "description": "Info box value or values to place next to the tracker line.\nThis is either an array of objects, with each object\nspecifying the label (a string) and value (also a string)\nto be shown in the info box, or a simple string label."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the title for the chart row"
      },
      "titleHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specify the height of the title\nDefault value is 28 pixels"
      },
      "titleStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Specify the styling of the chart row's title"
      },
      "titleBoxStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Specify the styling of the box behind chart row's title"
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "leftAxisWidths": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": ""
      },
      "rightAxisWidths": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": ""
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "trackerTimeFormat": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"%b %d %Y %X\"",
          "computed": false
        }
      },
      "timeFormat": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "trackerTime": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": ""
      },
      "enablePanZoom": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/Charts.js": {
    "description": "The `<Charts>` element is a grouping for charts within a row.\nIt takes no props. Each chart within the group will be overlaid\non top of each other.\n\nHere is an example of two line charts within a `<Charts>` group:\n\n```xml\n<ChartContainer timeRange={audSeries.timerange()}>\n    <ChartRow height=\"200\">\n        <YAxis/>\n        <Charts>\n            <LineChart axis=\"aud\" series={audSeries} style={audStyle}/>\n            <LineChart axis=\"euro\" series={euroSeries} style={euroStyle}/>\n        </Charts>\n        <YAxis/>\n    </ChartRow>\n</ChartContainer>\n```\n\n## Making your own chart\n\nAnything within this grouping is considered a chart, meaning it will have\ncertain props injected into it. As a result you can easily implement your own chart\nby simply expecting to have these props available and rendering as such.\n\nFor your own chart, the render() method should return a SVG group `<g>` at the\ntop level, and then your chart rendering within that.\n\nIn addition to any props you add to your chart, the following props are passed into\neach chart automatically:\n\n#### timeScale\n\nA d3 scale for the time axis which you can use to transform your data in the x direction\n\n#### yScale\n\nA d3 scale for the y-axis which you can use to transform your data in the y direction\n\n#### width\n\nA the width your chart will render into",
    "displayName": "Charts",
    "methods": []
  },
  "src/components/EventChart.js": {
    "description": "Renders an event view that shows the supplied set of events along a time axis.\nThe events should be supplied as a Pond TimeSeries.\nThat series may contain regular TimeEvents, TimeRangeEvents\nor IndexedEvents.",
    "displayName": "EventChart",
    "methods": [
      {
        "name": "onMouseOver",
        "docblock": "Continues a hover event on a specific bar of the bar chart.",
        "modifiers": [],
        "params": [
          {
            "name": "e"
          },
          {
            "name": "event"
          }
        ],
        "returns": null,
        "description": "Continues a hover event on a specific bar of the bar chart."
      },
      {
        "name": "onMouseLeave",
        "docblock": "Handle mouse leave and calls onMouseLeave callback if one is provided",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Handle mouse leave and calls onMouseLeave callback if one is provided"
      },
      {
        "name": "handleClick",
        "docblock": "Handle click will call the onSelectionChange callback if one is provided\nas a prop. It will be called with the event selected.",
        "modifiers": [],
        "params": [
          {
            "name": "e"
          },
          {
            "name": "event"
          }
        ],
        "returns": null,
        "description": "Handle click will call the onSelectionChange callback if one is provided\nas a prop. It will be called with the event selected."
      }
    ],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this chart",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "series": {
        "type": {
          "name": "instanceOf",
          "value": "TimeSeries"
        },
        "required": true,
        "description": "What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize"
      },
      "label": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "Set hover label text\nWhen label is function callback it will be called with current event."
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height in pixels for the event bar",
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The distance in pixels to inset the event bar from its actual timerange",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "hoverMarkerWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Marker width on hover",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "textOffsetX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Hover text offset position X",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "textOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Hover text offset position Y",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A function that should return the style of the event box"
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Event selection on click. Will be called with selected event."
      },
      "onMouseLeave": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Mouse leave at end of hover event"
      },
      "onMouseOver": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Mouse over event callback"
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      }
    }
  },
  "src/components/EventHandler.js": {
    "description": "Internal component which provides the top level event catcher for the charts.\nThis is a higher order component. It wraps a tree of SVG elements below it,\npassed in as this.props.children, and catches events that they do not handle.\n\nThe EventHandler is responsible for pan and zoom events as well as other click\nand hover actions.",
    "displayName": "EventHandler",
    "methods": [
      {
        "name": "getOffsetMousePosition",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleScrollWheel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseOut",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseMove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleContextMenu",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "enablePanZoom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "enableDragZoom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableWheelZoom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean to turn off interactive mouse wheel to zoom behavior for the chart.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "scale": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": ""
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": ""
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": ""
      },
      "maxTime": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": ""
      },
      "minTime": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": ""
      },
      "minDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "onZoom": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onMouseMove": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onMouseOut": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onMouseClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onContextMenu": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/components/EventMarker.js": {
    "description": "Renders a marker at a specific event on the chart.\n\nTo explain how EventMarkers work, it's useful to explain a little\nterminology used here. A marker has several parts:\n\n * the \"marker\" itself which appears at the (value, time) of the event.\n   This is a dot which whose radius is defined by markerRadius, and\n   whose style is set with markerStyle\n * the \"markerLabel\" which is a string that will be rendered next to\n   the marker. The label can be aligned with markerAlign and also\n   styled with markerLabelStyle\n * the \"info box\" which is a box containing values that hovers that the\n   top of the chart. Optionally it can show the time above the box.\n   The values themselves are supplied as an array of objects using\n   the `info` prop. The info box can be styled with `infoStyle`,\n   sized with `infoWidth` and `infoHeight`, and the time formatted\n   with `infoTimeFormat`\n * the \"stem\" which is a connector between the marker and the\n   info box to visually link the two\n\nCombining these attributes, Event markers fall into two flavors, either\nyou want to omit the infoBox and mark the event with a dot and optionally\na label, or you want to omit the label (and perhaps marker dot) and show\na flag style marker with the infoBox connected to the event with the stem.\n\nAs with other IndexedEvents or TimeRangeEvents, the marker will appear at\nthe center of the timerange represented by that event. You can, however,\noverride either the x or y position by a number of pixels.",
    "displayName": "EventMarker",
    "methods": [
      {
        "name": "renderTime",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderMarker",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          },
          {
            "name": "column",
            "type": null
          },
          {
            "name": "info",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"point\"",
              "computed": false
            },
            {
              "value": "\"flag\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"flag\"",
          "computed": false
        }
      },
      "event": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "instanceOf",
              "value": "TimeEvent"
            },
            {
              "name": "instanceOf",
              "value": "IndexedEvent"
            },
            {
              "name": "instanceOf",
              "value": "TimeRangeEvent"
            }
          ]
        },
        "required": false,
        "description": "What [Pond Event](https://esnet-pondjs.appspot.com/#/event) to mark"
      },
      "column": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Which column in the Event to use\n\nNOTE : Columns can't have periods because periods\nrepresent a path to deep data in the underlying events\n(i.e. reference into nested data structures)",
        "defaultValue": {
          "value": "\"value\"",
          "computed": false
        }
      },
      "info": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "shape",
                "value": {
                  "label": {
                    "name": "string",
                    "required": false
                  },
                  "value": {
                    "name": "string",
                    "required": false
                  }
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The values to show in the info box. This is either an array of\nobjects, with each object specifying the label and value\nto be shown in the info box, or a simple string label. If this\nprop is not supplied, no infoBox will be displayed."
      },
      "infoStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the info box itself. Typically you'd want to\nspecify a fill color, and stroke color/width here.",
        "defaultValue": {
          "value": "{\n    fill: \"white\",\n    opacity: 0.9,\n    stroke: \"#999\",\n    pointerEvents: \"none\"\n}",
          "computed": false
        }
      },
      "infoWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the info box",
        "defaultValue": {
          "value": "90",
          "computed": false
        }
      },
      "infoHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the info box",
        "defaultValue": {
          "value": "25",
          "computed": false
        }
      },
      "infoTimeFormat": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Alter the format of the timestamp shown on the info box.\nThis may be either a function or a string. If you provide a function\nthat will be passed an Index and should return a string. For example:\n```\n    index => moment(index.begin()).format(\"Do MMM 'YY\")\n```\nAlternatively you can pass in a d3 format string. That will be applied\nto the begin time of the Index range."
      },
      "markerLabelAlign": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Show a label to the left or right of the marker",
        "defaultValue": {
          "value": "\"left\"",
          "computed": false
        }
      },
      "markerRadius": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The radius of the dot at the end of the marker",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "markerStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the event marker dot",
        "defaultValue": {
          "value": "{\n    fill: \"#999\"\n}",
          "computed": false
        }
      },
      "yValueFunc": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "The y value is calculated by the column and event, but if\nthis prop is provided this will be used instead."
      },
      "offsetX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Offset the marker position in the x direction.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "offsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Offset the marker position in the y direction",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "infoOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The vertical offset in pixels of the EventMarker info box from the\ntop of the chart. The default is 20.",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The yScale supplied by the associated YAxis"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      },
      "stemStyle": {
        "defaultValue": {
          "value": "{\n    stroke: \"#999\",\n    cursor: \"crosshair\",\n    pointerEvents: \"none\"\n}",
          "computed": false
        },
        "required": false
      },
      "markerLabelStyle": {
        "defaultValue": {
          "value": "{\n    fill: \"#999\"\n}",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/Label.js": {
    "description": "Renders a simple label surrounded by a box within in svg\n\n     +----------------+\n     | My label       |\n     |                |\n     +----------------+",
    "displayName": "Label",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where to position the label, either \"left\" or \"center\" within the box",
        "defaultValue": {
          "value": "\"center\"",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The label to render"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the label. This is the inline CSS applied directly\nto the label box"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the rectangle to render into",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the rectangle to render into",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "pointerEvents": {
        "defaultValue": {
          "value": "\"none\"",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/LabelAxis.js": {
    "description": "Renders an 'axis' that displays a label for a data channel along with a\nmax and average value:\n```\n     +----------------+-----+------- ...\n     | Traffic        | 120 |\n     | Max 100 Gbps   |     | Chart  ...\n     | Avg 26 Gbps    | 0   |\n     +----------------+-----+------- ...\n```\n\nThis can be used for data channel style displays where the user will see many\nrows of data stacked on top of each other and will need to interact with the\ndata to see actual values. You can combine this with the `ValueAxis` to help\ndo that. See the Cycling example for exactly how to arrange that.",
    "displayName": "LabelAxis",
    "methods": [
      {
        "name": "mergeStyles",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "style",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderAxis",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "axisStyle",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The label to show as the axis."
      },
      "hideScale": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide the max/min values that appear alongside the label",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "values": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": false
              },
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "string"
                  }
                ],
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Supply a list of label value pairs to render within the LabelAxis.\nThis expects an array of objects. Each object is of the form:\n    {label: \"Speed\", value: \"26.2 mph\"}.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "valWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width to provide the values",
        "defaultValue": {
          "value": "40",
          "computed": false
        }
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "Max value of the axis scale"
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "Min value of the axis scale"
      },
      "format": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "If values are numbers, use this format string",
        "defaultValue": {
          "value": "\".2f\"",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the axis"
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the axis"
      },
      "style": {
        "type": {
          "name": "shape",
          "value": {
            "axis": {
              "name": "object",
              "required": false
            },
            "label": {
              "name": "object",
              "required": false
            },
            "values": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object specifying the CSS by which the label axis can be styled. The object can contain:\n\"label\", \"values\" and \"axis\". Each of these is an inline CSS style applied\nto the axis label, axis values and axis line respectively.",
        "defaultValue": {
          "value": "{\n    axis: {\n        fontSize: 11,\n        textAnchor: \"left\",\n        fill: \"#bdbdbd\"\n    },\n    label: {\n        fontSize: 12,\n        textAnchor: \"middle\",\n        fill: \"#838383\"\n    },\n    values: {\n        fill: \"none\",\n        stroke: \"none\"\n    }\n}",
          "computed": false
        }
      }
    }
  },
  "src/components/Legend.js": {
    "description": "",
    "displayName": "Legend",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHover",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHoverLeave",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "providedStyle",
        "docblock": "For each category item we get the users stle preference. This\ncan be supplied in a number of ways:\n * Typically you would get the legend stle from a Style instance\n * Alternatively, you can pass in a style object which has your\n   category in it and the associated style\n * Finally, the provided style can also be a function",
        "modifiers": [],
        "params": [
          {
            "name": "category"
          },
          {
            "name": "type"
          }
        ],
        "returns": null,
        "description": "For each category item we get the users stle preference. This\ncan be supplied in a number of ways:\n * Typically you would get the legend stle from a Style instance\n * Alternatively, you can pass in a style object which has your\n   category in it and the associated style\n * Finally, the provided style can also be a function"
      },
      {
        "name": "styleMode",
        "docblock": "For each category this function takes the current\nselected and highlighted item, along with the disabled\nstate of the item, and returns the mode it should be\nrendered in: normal, selected, highlighted, or muted",
        "modifiers": [],
        "params": [
          {
            "name": "category"
          }
        ],
        "returns": null,
        "description": "For each category this function takes the current\nselected and highlighted item, along with the disabled\nstate of the item, and returns the mode it should be\nrendered in: normal, selected, highlighted, or muted"
      },
      {
        "name": "symbolStyle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "category",
            "type": null
          },
          {
            "name": "type",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "labelStyle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "category",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "valueStyle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "category",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"swatch\"",
              "computed": false
            },
            {
              "value": "\"line\"",
              "computed": false
            },
            {
              "value": "\"dot\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The overall style of the legend items, either a color \"swatch\", a\ncolored \"line\", or a \"dot\".",
        "defaultValue": {
          "value": "\"swatch\"",
          "computed": false
        }
      },
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Alignment of the legend within the available space. Either left or right.",
        "defaultValue": {
          "value": "\"left\"",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            },
            {
              "name": "instanceOf",
              "value": "Styler"
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "categories": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "key": {
                "name": "string",
                "required": true
              },
              "label": {
                "name": "string",
                "required": true
              },
              "disabled": {
                "name": "bool",
                "required": false
              },
              "style": {
                "name": "object",
                "required": false
              },
              "labelStyle": {
                "name": "object",
                "required": false
              }
            }
          }
        },
        "required": true,
        "description": "The categories array specifies details and style for each item in the legend. For each item:\n * \"key\" - (required) the name by which the legend will be known\n * \"label\" - (required) the displayed label\n * \"style\" - the swatch, dot, or line style. Typically you'd just\n             specify {backgroundColor: \"#1f77b4\"}\n * \"labelStyle\" - the label style\n * \"disabled\" - a disabled state\n\n```\nconst categories = [\n   {key: \"aust\", label: \"AUD\", disabled: this.state.disabled[\"aust\"],\n     style: {backgroundColor: \"#1f77b4\"}},\n   {key: \"usa\", label: \"USD\", disabled: this.state.disabled[\"usa\"],\n     style: {backgroundColor: \"#aec7e8\"}}\n];\n```"
      },
      "symbolWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the legend symbol",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "symbolHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the legend symbol",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "highlight": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Which item, specified by its key, should be rendered as highlighted"
      },
      "selection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Which item, specified by its key, should be rendered as selected"
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback will be called with a legend item is selected (i.e. it is clicked\non by the user)"
      },
      "onHighlightChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback will be called with a legend item is highlighted (i.e. it is hovered\nover by the user)"
      },
      "stack": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Defines whether to stack legend items vertically or not",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "marginBottom": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The margin at the bottom. Default value is 20px",
        "defaultValue": {
          "value": "\"20px\"",
          "computed": false
        }
      },
      "labelStyle": {
        "defaultValue": {
          "value": "{}",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/LineChart.js": {
    "description": "The `<LineChart>` component is able to display multiple columns of a TimeSeries\nas separate line charts.\n\nThe `<LineChart>` should be used within `<ChartContainer>` etc., as this will\nconstruct the horizontal and vertical axis, and manage other elements.\n\nHere is an example of two columns of a TimeSeries being plotted with the `<LineChart>`:\n\n```\n  <ChartContainer timeRange={this.state.timerange} >\n    <ChartRow height=\"200\">\n      <YAxis id=\"y\" label=\"Price ($)\" min={0.5} max={1.5} format=\"$,.2f\" />\n      <Charts>\n        <LineChart\n          axis=\"y\"\n          breakLine={false}\n          series={currencySeries}\n          columns={[\"aud\", \"euro\"]}\n          style={style}\n          interpolation=\"curveBasis\" />\n      </Charts>\n    </ChartRow>\n  </ChartContainer>\n```",
    "displayName": "LineChart",
    "methods": [
      {
        "name": "handleHover",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHoverLeave",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "providedPathStyleMap",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "pathStyle",
        "docblock": "Returns the style used for drawing the path",
        "modifiers": [],
        "params": [
          {
            "name": "column"
          }
        ],
        "returns": null,
        "description": "Returns the style used for drawing the path"
      },
      {
        "name": "renderPath",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "data",
            "type": null
          },
          {
            "name": "column",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderLines",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderLine",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this chart",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "series": {
        "type": {
          "name": "instanceOf",
          "value": "TimeSeries"
        },
        "required": true,
        "description": "What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize"
      },
      "axis": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Reference to the axis which provides the vertical scale for drawing.\ne.g. specifying `axis=\"trafficRate\"` would refer the y-scale of the YAxis\nwith id=\"trafficRate\"."
      },
      "columns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Which columns from the series to draw.\n\nNOTE : Columns can't have periods because periods \nrepresent a path to deep data in the underlying events \n(i.e. reference into nested data structures)",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            },
            {
              "name": "instanceOf",
              "value": "Styler"
            }
          ]
        },
        "required": false,
        "description": "The styles to apply to the underlying SVG lines. This is a mapping\nof column names to objects with style attributes, in the following\nformat:\n\n```\nconst style = {\n    in: {\n        normal: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\n        highlighted: {stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1},\n        selected: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\n        muted: {stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1}\n    },\n    out: {\n        ...\n    }\n};\n\n <LineChart style={style} ... />\n```\n\nAlternatively, you can pass in a `Styler`. For example:\n\n```\nconst currencyStyle = Styler([\n    {key: \"aud\", color: \"steelblue\", width: 1, dashed: true},\n    {key: \"euro\", color: \"#F68B24\", width: 2}\n]);\n\n<LineChart columns={[\"aud\", \"euro\"]} style={currencyStyle} ... />\n\n```"
      },
      "interpolation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"curveBasis\"",
              "computed": false
            },
            {
              "value": "\"curveBasisOpen\"",
              "computed": false
            },
            {
              "value": "\"curveBundle\"",
              "computed": false
            },
            {
              "value": "\"curveCardinal\"",
              "computed": false
            },
            {
              "value": "\"curveCardinalOpen\"",
              "computed": false
            },
            {
              "value": "\"curveCatmullRom\"",
              "computed": false
            },
            {
              "value": "\"curveCatmullRomOpen\"",
              "computed": false
            },
            {
              "value": "\"curveLinear\"",
              "computed": false
            },
            {
              "value": "\"curveMonotoneX\"",
              "computed": false
            },
            {
              "value": "\"curveMonotoneY\"",
              "computed": false
            },
            {
              "value": "\"curveNatural\"",
              "computed": false
            },
            {
              "value": "\"curveRadial\"",
              "computed": false
            },
            {
              "value": "\"curveStep\"",
              "computed": false
            },
            {
              "value": "\"curveStepAfter\"",
              "computed": false
            },
            {
              "value": "\"curveStepBefore\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Any of D3's interpolation modes.",
        "defaultValue": {
          "value": "\"curveLinear\"",
          "computed": false
        }
      },
      "breakLine": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The determines how to handle bad/missing values in the supplied\nTimeSeries. A missing value can be null or NaN. If breakLine\nis set to true (the default) then the line will be broken on either\nside of the bad value(s). If breakLine is false bad values\nare simply removed and the adjoining points are connected.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "selection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected item, which will be rendered in the \"selected\" style.\nIf a line is selected, all other lines will be rendered in the \"muted\" style.\n\nSee also `onSelectionChange`"
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback that will be called when the selection changes. It will be called\nwith the column corresponding to the line being clicked."
      },
      "highlight": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The highlighted column, which will be rendered in the \"highlighted\" style.\n\nSee also `onHighlightChange`"
      },
      "onHighlightChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback that will be called when the hovered over line changes.\nIt will be called with the corresponding column."
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The yScale supplied by the associated YAxis"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      },
      "smooth": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/MultiBrush.js": {
    "description": "Renders a brush with the range defined in the prop `timeRange`.",
    "displayName": "MultiBrush",
    "methods": [
      {
        "name": "viewport",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleBrushMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "brush_idx",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleOverlayMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "hasNullBrush",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleMouseClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "brushIndex",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHandleMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "handle",
            "type": null
          },
          {
            "name": "brushIndex",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseMove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderOverlay",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderBrush",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "timeRange",
            "type": null
          },
          {
            "name": "idx",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderHandles",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "timeRange",
            "type": null
          },
          {
            "name": "idx",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "timeRanges": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "instanceOf",
            "value": "TimeRange"
          }
        },
        "required": false,
        "description": "The timeranges for the brushes. Typically you would maintain this\nas state on the surrounding page, since it would likely control\nanother page element, such as the range of the main chart. See\nalso `onTimeRangeChanged()` for receiving notification of the\nbrush range being changed by the user.\n\nTakes an array of Pond TimeRange object."
      },
      "style": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "The brush is rendered as an SVG rect. You can specify the style\nof this rect using this prop. The brush style is a function that you\nprovide. It will be called with the index of the TimeRange, corresponding\nto those in the `timeRanges` prop."
      },
      "handleSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The size of the invisible side handles. Defaults to 6 pixels.",
        "defaultValue": {
          "value": "6",
          "computed": false
        }
      },
      "allowFreeDrawing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If this prop is false, you will only be able to draw a new brush if the last position of the timeRanges\narray is equal to null, otherwise it will allow the free drawing and the index passed to onTimeRangeChanged\nwill the equal to the length of the timeRanges array",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "onTimeRangeChanged": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback which will be called if the brush range is changed by\nthe user. It is called with a Pond TimeRange object and the index position of\nthe brush in the timeRanges prop."
      },
      "onUserMouseUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "when user stop drawing or dragging box"
      },
      "onTimeRangeClicked": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "When the user clicks one of the TimeRanges"
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The height supplied by the surrounding ChartContainer"
      }
    }
  },
  "src/components/Resizable.js": {
    "description": "This takes a single child and inserts a prop 'width' on it that is the\ncurrent width of the this container. This is handy if you want to surround\na chart or other svg diagram and have this drive the chart width.",
    "displayName": "Resizable",
    "methods": [
      {
        "name": "handleResize",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/components/ScatterChart.js": {
    "description": "The `<ScatterChart >` widget is able to display multiple columns of a series\nscattered across a time axis.\n\nThe ScatterChart should be used within `<ChartContainer>` etc.,\nas this will construct the horizontal and vertical axis, and\nmanage other elements. As with other charts, this lets them be stacked or\noverlaid on top of each other.\n\nA custom info overlay lets you hover over the data and examine points. Points\ncan be selected or highlighted.\n\n```\n<ChartContainer timeRange={series.timerange()}>\n    <ChartRow height=\"150\">\n        <YAxis id=\"wind\" label=\"Wind gust (mph)\" labelOffset={-5}\n               min={0} max={series.max()} width=\"100\" type=\"linear\" format=\",.1f\"/>\n        <Charts>\n            <ScatterChart\n              axis=\"wind\"\n              series={series}\n              style={{color: \"steelblue\", opacity: 0.5}} />\n        </Charts>\n    </ChartRow>\n</ChartContainer>\n```\n\n### Styling\n\nA scatter chart supports per-column or per-event styling. Styles can be set for\neach of the four states that are possible for each event: normal, highlighted,\nselected or muted. To style per-column, supply an object. For per-event styling\nsupply a function: `(event, column) => {}` The functon will return a style object.\nSee the `style` prop in the API documentation for more information.\n\nSeparately the size of the dots can be controlled with the `radius` prop. This\ncan either be a fixed value (e.g. 2.0), or a function. If a function is supplied\nit will be called as `(event, column) => {}` and should return the size.\n\nThe hover info for each point is also able to be styled using the info style.\nThis enables you to control the drawing of the box and connecting lines. Using\nthe `infoWidth` and `infoHeight` props you can control the size of the box, which\nis fixed.",
    "displayName": "ScatterChart",
    "methods": [
      {
        "name": "getOffsetMousePosition",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "event",
            "type": null
          },
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHover",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHoverLeave",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "providedStyleMap",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "style",
        "docblock": "Returns the style used for drawing the path",
        "modifiers": [],
        "params": [
          {
            "name": "column"
          },
          {
            "name": "event"
          }
        ],
        "returns": null,
        "description": "Returns the style used for drawing the path"
      },
      {
        "name": "renderScatter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this chart",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "series": {
        "type": {
          "name": "instanceOf",
          "value": "TimeSeries"
        },
        "required": true,
        "description": "What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize"
      },
      "columns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Which columns of the series to render\n\nNOTE : Columns can't have periods because periods\nrepresent a path to deep data in the underlying events\n(i.e. reference into nested data structures)",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "axis": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Reference to the axis which provides the vertical scale for drawing. e.g.\nspecifying axis=\"trafficRate\" would refer the y-scale to the YAxis of id=\"trafficRate\"."
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "func"
            },
            {
              "name": "instanceOf",
              "value": "Styler"
            }
          ]
        },
        "required": false,
        "description": "The radius of the points in the scatter chart.\n\nIf this is a number it will be used as the radius for every point.\nIf this is a function it will be called for each event.\n\nThe function is called with the event and the column name and must return a number.\n\nFor example this function will use the radius column of the event:\n\n```\nconst radius = (event, column) => {\n   return event.get(\"radius\");\n}\n```",
        "defaultValue": {
          "value": "2.0",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "The style of the scatter chart drawing (using SVG CSS properties).\nThis is an object with a key for each column which is being plotted,\nper the `columns` prop. Each of those keys has an object as its\nvalue which has keys which are style properties for an SVG <Circle> and\nthe value to use.\n\nFor example:\n```\nstyle = {\n    columnName: {\n        normal: {\n            fill: \"steelblue\",\n            opacity: 0.8,\n        },\n        highlighted: {\n            fill: \"#a7c4dd\",\n            opacity: 1.0,\n        },\n        selected: {\n            fill: \"orange\",\n            opacity: 1.0,\n        },\n        muted: {\n            fill: \"grey\",\n            opacity: 0.5\n        }\n    }\n}\n```\n\nYou can also supply a function, which will be called with an event\nand column. The function should return an object containing the\n4 states (normal, highlighted, selected and muted) and the corresponding\nCSS properties."
      },
      "infoStyle": {
        "type": {
          "name": "shape",
          "value": {
            "line": {
              "name": "object",
              "required": false
            },
            "box": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "The style of the info box and connecting lines. The style should\nbe an object of the form { line, box }. Line and box are both objects\ncontaining the inline CSS for those elements of the info tracker.",
        "defaultValue": {
          "value": "{\n    stroke: \"#999\",\n    fill: \"white\",\n    opacity: 0.9,\n    pointerEvents: \"none\"\n}",
          "computed": false
        }
      },
      "infoWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the hover info box",
        "defaultValue": {
          "value": "90",
          "computed": false
        }
      },
      "infoHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the hover info box",
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "infoOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The vertical offset in pixels of the EventMarker info box from the\ntop of the chart.",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "info": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": false
              },
              "value": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "The values to show in the info box. This is an array of\nobjects, with each object specifying the label and value\nto be shown in the info box."
      },
      "selected": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "event": {
                "name": "instanceOf",
                "value": "Event",
                "required": false
              },
              "column": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "The selected dot, which will be rendered in the \"selected\" style.\nIf a dot is selected, all other dots will be rendered in the \"muted\" style.\n\nSee also `onSelectionChange`"
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback that will be called when the selection changes. It will be called\nwith an object containing the event and column."
      },
      "highlight": {
        "type": {
          "name": "shape",
          "value": {
            "event": {
              "name": "instanceOf",
              "value": "Event",
              "required": false
            },
            "column": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "The highlighted dot, as an object containing the { event, column },\nwhich will be rendered in the \"highlighted\" style.\n\nSee also the prop `onMouseNear`."
      },
      "onMouseNear": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Will be called with the nearest point to the cursor. The callback\nwill contain the point, which is a map of { event, column }."
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The yScale supplied by the associated YAxis"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The height supplied by the surrounding ChartContainer"
      },
      "stemStyle": {
        "defaultValue": {
          "value": "{\n    stroke: \"#999\",\n    cursor: \"crosshair\",\n    pointerEvents: \"none\"\n}",
          "computed": false
        },
        "required": false
      },
      "markerStyle": {
        "defaultValue": {
          "value": "{\n    fill: \"#999\"\n}",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/TimeAxis.js": {
    "description": "Renders a horizontal time axis. This is used internally by the ChartContainer\nas a result of you specifying the timerange for the chart. Please see the API\ndocs for ChartContainer for more information.",
    "displayName": "TimeAxis",
    "methods": [
      {
        "name": "mergeStyles",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "style",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderTimeAxis",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "scale",
            "type": null
          },
          {
            "name": "format",
            "type": null
          },
          {
            "name": "showGrid",
            "type": null
          },
          {
            "name": "gridHeight",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "scale": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": ""
      },
      "showGrid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "angled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "gridHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "format": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "utc": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "style": {
        "type": {
          "name": "shape",
          "value": {
            "label": {
              "name": "object",
              "required": false
            },
            "values": {
              "name": "object",
              "required": false
            },
            "axis": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{\n    values: {\n        stroke: \"none\",\n        fill: \"#8B7E7E\", // Default value color\n        fontWeight: 100,\n        fontSize: 11,\n        font: '\"Goudy Bookletter 1911\", sans-serif\"'\n    },\n    ticks: {\n        fill: \"none\",\n        stroke: \"#C0C0C0\"\n    },\n    axis: {\n        fill: \"none\",\n        stroke: \"#C0C0C0\"\n    }\n}",
          "computed": false
        }
      },
      "tickCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/components/TimeMarker.js": {
    "description": "",
    "displayName": "TimeMarker",
    "methods": [
      {
        "name": "renderLine",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "posx",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderTimeMarker",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "d",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderInfoBox",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "posx",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this chart",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "time": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "The time, expressed as a Javascript `Date` object, to display the marker"
      },
      "infoValues": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "shape",
                "value": {
                  "label": {
                    "name": "string",
                    "required": false
                  },
                  "value": {
                    "name": "string",
                    "required": false
                  }
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The values to show in the info box. This is either an array of\nobjects, with each object specifying the label and value\nto be shown in the info box, or a simple string label"
      },
      "infoStyle": {
        "type": {
          "name": "shape",
          "value": {
            "line": {
              "name": "object",
              "required": false
            },
            "box": {
              "name": "object",
              "required": false
            },
            "dot": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "The style of the info box and connecting lines. This is an\nobject of the form { line, box, dot }. Line, box and dot\nare themselves objects representing inline CSS for each of\nthe pieces of the info marker.",
        "defaultValue": {
          "value": "{\n    line: {\n        stroke: \"#999\",\n        cursor: \"crosshair\",\n        pointerEvents: \"none\"\n    },\n    box: {\n        fill: \"white\",\n        opacity: 0.9,\n        stroke: \"#999\",\n        pointerEvents: \"none\"\n    },\n    dot: {\n        fill: \"#999\"\n    }\n}",
          "computed": false
        }
      },
      "infoWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the hover info box",
        "defaultValue": {
          "value": "90",
          "computed": false
        }
      },
      "infoHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the hover info box",
        "defaultValue": {
          "value": "25",
          "computed": false
        }
      },
      "showInfoBox": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the info box at all. If you don't have any values to show and just\nwant a line and a time (for example), you can set this to false.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showLine": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "You can show the info box without the corresponding time marker. Why would\nyou do this? I don't know. Actually, I do. You might use the ChartContainer\ntracker mechanism to show the line across multiple rows, then add a TimeMarker\nselectively to each row.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showTime": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "You can hide the time displayed above the info box. You might do this because\nit is already displayed elsewhere in your UI. Or maybe you just don't like it.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "timeFormat": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "The time format used for display of the time above the info box."
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The height supplied by the surrounding ChartContainer"
      }
    }
  },
  "src/components/TimeRangeMarker.js": {
    "description": "Renders a band with extents defined by the supplied TimeRange. This\nis a super simple component right now which just renders a simple\nrectangle, in the style of the prop `style` across the timerange\nspecified. However, this is useful for highlighting a timerange to\ncorrespond with another part of the your UI.\n\nSee also the Brush component for a TimeRange marker that you can\nresize interactively.",
    "displayName": "TimeRangeMarker",
    "methods": [
      {
        "name": "renderBand",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this marker",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "timerange": {
        "type": {
          "name": "instanceOf",
          "value": "TimeRange"
        },
        "required": true,
        "description": "The timerange to mark. This is in the form of a\n[Pond TimeRange](https://esnet-pondjs.appspot.com/#/timerange)"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the rect that will be rendered as a SVG <Rect>. This\nobject is the inline CSS for that rect.",
        "defaultValue": {
          "value": "{ fill: \"rgba(70, 130, 180, 0.25);\" }",
          "computed": false
        }
      },
      "timeScale": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "[Internal] The timeScale supplied by the surrounding ChartContainer"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "[Internal] The width supplied by the surrounding ChartContainer"
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "[Internal] The height supplied by the surrounding ChartContainer"
      },
      "spacing": {
        "defaultValue": {
          "value": "1",
          "computed": false
        },
        "required": false
      },
      "offset": {
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/ValueAxis.js": {
    "description": "Renders a 'axis' that display a label for a current tracker value:\n```\n     ----+----------------+\n         |     56.2G      |\n         |      bps       |\n         |                |\n     ----+----------------+\n```\nThis would be used when you have many rows of data and the user is required\nto interact with the data to see actual values. You would use this at the\nend of the row and supply it with the current value. See the cycling example\nfor how that would all work.",
    "displayName": "ValueAxis",
    "methods": [],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "If values are numbers, use this format string"
      },
      "detail": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Use this to show what units are being used. It will appear below\nthe value."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the axis"
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The height of the axis"
      }
    }
  },
  "src/components/ValueList.js": {
    "description": "Renders a list of values in svg\n\n     +----------------+\n     | Max 100 Gbps   |\n     | Avg 26 Gbps    |\n     +----------------+",
    "displayName": "ValueList",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where to position the label, either \"left\" or \"center\" within the box",
        "defaultValue": {
          "value": "\"center\"",
          "computed": false
        }
      },
      "values": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": false
              },
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "string"
                  }
                ],
                "required": false
              }
            }
          }
        },
        "required": true,
        "description": "An array of label value pairs to render"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS object to be applied to the ValueList surrounding box and the label (text).",
        "defaultValue": {
          "value": "{ fill: \"#FEFEFE\", stroke: \"#DDD\", opacity: 0.8 }",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the rectangle to render into",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the rectangle to render into",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "pointerEvents": {
        "defaultValue": {
          "value": "\"none\"",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/components/YAxis.js": {
    "description": "The `YAxis` widget displays a vertical axis to the left or right\nof the charts. A `YAxis` always appears within a `ChartRow`, from\nwhich it gets its height and positioning. You can have more than\none axis per row. You do control how wide it is.\n\nHere's a simple YAxis example:\n\n```js\n<YAxis\n  id=\"price-axis\"\n  label=\"Price (USD)\"\n  min={0} max={100}\n  width=\"60\"\n  type=\"linear\"\n  format=\"$,.2f\"\n/>\n```\n\nVisually you can control the axis `label`, its size via the `width`\nprop, its `format`, and `type` of scale (linear). You can quicky turn\nit on and off with the `visible` prop.\n\nEach axis also defines a scale through a `min` and `max` prop. Chart\nthen refer to the axis by by citing the axis `id` in their `axis`\nprop. Those charts will then use the axis scale for their y-scale.\nThis is what ties them together. Many charts can use the same axis,\nor not.\n\nHere is an example of two line charts that each have their own axis:\n\n```js\n<ChartContainer timeRange={audSeries.timerange()}>\n    <ChartRow height=\"200\">\n        <YAxis id=\"aud\" label=\"AUD\" min={0.5} max={1.5} width=\"60\" format=\"$,.2f\"/>\n        <Charts>\n            <LineChart axis=\"aud\" series={audSeries} style={audStyle}/>\n            <LineChart axis=\"euro\" series={euroSeries} style={euroStyle}/>\n        </Charts>\n        <YAxis id=\"euro\" label=\"Euro\" min={0.5} max={1.5} width=\"80\" format=\"$,.2f\"/>\n    </ChartRow>\n</ChartContainer>\n```\n\n Note that there are two `<YAxis>` components defined here, one before\n the `<Charts>` block and one after. This defines that the first axis will\n appear to the left of the charts and the second will appear right of the charts.\n Each of the line charts uses its `axis` prop to identify the axis (\"aud\" or \"euro\")\n it will use for its vertical scale.",
    "displayName": "YAxis",
    "methods": [
      {
        "name": "yformat",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "fmt",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "mergeStyles",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "style",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "postSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "style",
            "type": null
          },
          {
            "name": "hideAxisLine",
            "type": null
          },
          {
            "name": "height",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "generator",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "type",
            "type": null
          },
          {
            "name": "absolute",
            "type": null
          },
          {
            "name": "yformat",
            "type": null
          },
          {
            "name": "axis",
            "type": null
          },
          {
            "name": "scale",
            "type": null
          },
          {
            "name": "height",
            "type": null
          },
          {
            "name": "tickCount",
            "type": null
          },
          {
            "name": "min",
            "type": null
          },
          {
            "name": "max",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderAxis",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "align",
            "type": null
          },
          {
            "name": "scale",
            "type": null
          },
          {
            "name": "width",
            "type": null
          },
          {
            "name": "height",
            "type": null
          },
          {
            "name": "showGrid",
            "type": null
          },
          {
            "name": "chartExtent",
            "type": null
          },
          {
            "name": "hideAxisLine",
            "type": null
          },
          {
            "name": "absolute",
            "type": null
          },
          {
            "name": "type",
            "type": null
          },
          {
            "name": "fmt",
            "type": null
          },
          {
            "name": "label",
            "type": null
          },
          {
            "name": "tickCount",
            "type": null
          },
          {
            "name": "min",
            "type": null
          },
          {
            "name": "max",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "updateAxis",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "align",
            "type": null
          },
          {
            "name": "scale",
            "type": null
          },
          {
            "name": "width",
            "type": null
          },
          {
            "name": "height",
            "type": null
          },
          {
            "name": "showGrid",
            "type": null
          },
          {
            "name": "chartExtent",
            "type": null
          },
          {
            "name": "hideAxisLine",
            "type": null
          },
          {
            "name": "absolute",
            "type": null
          },
          {
            "name": "type",
            "type": null
          },
          {
            "name": "fmt",
            "type": null
          },
          {
            "name": "label",
            "type": null
          },
          {
            "name": "tickCount",
            "type": null
          },
          {
            "name": "min",
            "type": null
          },
          {
            "name": "max",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "updateLabel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "label",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A name for the axis which can be used by a chart to reference the axis.\nThis is used by the ChartRow to match charts to this axis.",
        "defaultValue": {
          "value": "\"yaxis\"",
          "computed": false
        }
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide this axis"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The label to be displayed alongside the axis."
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"linear\"",
              "computed": false
            },
            {
              "value": "\"power\"",
              "computed": false
            },
            {
              "value": "\"log\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The scale type: linear, power, or log.",
        "defaultValue": {
          "value": "\"linear\"",
          "computed": false
        }
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum value, which combined with \"max\", define the scale of the axis.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum value, which combined with \"min\", define the scale of the axis.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A d3 scale for the y-axis which you can use to transform your data in the y direction.\nIf omitted, the scale will be automatically computed based on the max and min props."
      },
      "absolute": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render all ticks on the axis as positive values.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "shape",
          "value": {
            "label": {
              "name": "object",
              "required": false
            },
            "axis": {
              "name": "object",
              "required": false
            },
            "values": {
              "name": "object",
              "required": false
            },
            "ticks": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object specifying the CSS by which the axis can be styled. The object can contain:\n\"label\", \"values\", \"axis\" and \"ticks\". Each of these is an inline CSS style applied\nto the axis label, axis values, axis line and ticks respectively.\n\nNote that these are passed into d3's styling, so are regular CSS property names\nand not React's camel case names (e.g. \"stroke-dasharray\" not strokeDasharray).",
        "defaultValue": {
          "value": "{\n    label: {\n        stroke: \"none\",\n        fill: \"#8B7E7E\", // Default label color\n        fontWeight: 100,\n        fontSize: 12,\n        font: '\"Goudy Bookletter 1911\", sans-serif\"'\n    },\n    values: {\n        stroke: \"none\",\n        fill: \"#8B7E7E\", // Default value color\n        fontWeight: 100,\n        fontSize: 11,\n        font: '\"Goudy Bookletter 1911\", sans-serif\"'\n    },\n    ticks: {\n        fill: \"none\",\n        stroke: \"#C0C0C0\"\n    },\n    axis: {\n        fill: \"none\",\n        stroke: \"#C0C0C0\"\n    }\n}",
          "computed": false
        }
      },
      "showGrid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render a horizontal grid by extending the axis ticks across the chart area. Note that this\ncan only be applied to an inner axis (one next to a chart). If you have multiple axes then\nthis can't be used on the outer axes. Also, if you have an axis on either side of the chart\nthen you can use this, but the UX not be ideal.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hideAxisLine": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render the axis line. This is a nice option of you are also using `showGrid` as you may not\nwant both the vertical axis line and the extended ticks.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "transition": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The transition time for moving from one scale to another",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The width of the axis",
        "defaultValue": {
          "value": "80",
          "computed": false
        }
      },
      "labelOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Offset the axis label from its default position. This allows you to\nfine tune the label location, which may be necessary depending on the\nscale and how much room the tick labels take up. Maybe positive or\nnegative.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "format": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "If a string, the d3.format for the axis labels (e.g. `format=\\\"$,.2f\\\"`).\nIf a function, that function will be called with each tick value and\nshould generate a formatted string for that value to be used as the label\nfor that tick (e.g. `function (n) { return Number(n).toFixed(2) }`).",
        "defaultValue": {
          "value": "\".2s\"",
          "computed": false
        }
      },
      "align": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "If the chart should be rendered to with the axis on the left or right.\nIf you are using the axis in a ChartRow, you do not need to provide this.",
        "defaultValue": {
          "value": "\"left\"",
          "computed": false
        }
      },
      "scale": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "[Internal] The scale supplied by the ChartRow"
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "[Internal] The height supplied by the surrounding ChartContainer"
      },
      "tickCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of ticks"
      }
    }
  }
}
